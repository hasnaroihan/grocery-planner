// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: schedule.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (
    author
) VALUES (
    $1
) RETURNING id, author, created_at
`

func (q *Queries) CreateSchedule(ctx context.Context, author uuid.NullUUID) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule, author)
	var i Schedule
	err := row.Scan(&i.ID, &i.Author, &i.CreatedAt)
	return i, err
}

const createScheduleRecipe = `-- name: CreateScheduleRecipe :one
INSERT INTO schedules_recipes (
    schedule_id,
    recipe_id,
    portion
) VALUES (
    $1, $2, $3
) RETURNING schedule_id, recipe_id, portion
`

type CreateScheduleRecipeParams struct {
	ScheduleID int64 `json:"scheduleID"`
	RecipeID   int64 `json:"recipeID"`
	Portion    int32 `json:"portion"`
}

func (q *Queries) CreateScheduleRecipe(ctx context.Context, arg CreateScheduleRecipeParams) (SchedulesRecipe, error) {
	row := q.db.QueryRowContext(ctx, createScheduleRecipe, arg.ScheduleID, arg.RecipeID, arg.Portion)
	var i SchedulesRecipe
	err := row.Scan(&i.ScheduleID, &i.RecipeID, &i.Portion)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const deleteScheduleRecipe = `-- name: DeleteScheduleRecipe :exec
DELETE FROM schedules_recipes
WHERE schedule_id = $1 AND recipe_id = $2
`

type DeleteScheduleRecipeParams struct {
	ScheduleID int64 `json:"scheduleID"`
	RecipeID   int64 `json:"recipeID"`
}

func (q *Queries) DeleteScheduleRecipe(ctx context.Context, arg DeleteScheduleRecipeParams) error {
	_, err := q.db.ExecContext(ctx, deleteScheduleRecipe, arg.ScheduleID, arg.RecipeID)
	return err
}

const getSchedule = `-- name: GetSchedule :one
SELECT id, author, created_at from schedules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSchedule(ctx context.Context, id int64) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(&i.ID, &i.Author, &i.CreatedAt)
	return i, err
}

const getScheduleRecipe = `-- name: GetScheduleRecipe :many
SELECT sr.schedule_id, sr.recipe_id, r.name, sr.portion
from schedules_recipes as sr 
INNER JOIN recipes as r
ON sr.recipe_id = r.id
WHERE sr.schedule_id = $1
`

type GetScheduleRecipeRow struct {
	ScheduleID int64  `json:"scheduleID"`
	RecipeID   int64  `json:"recipeID"`
	Name       string `json:"name"`
	Portion    int32  `json:"portion"`
}

func (q *Queries) GetScheduleRecipe(ctx context.Context, scheduleID int64) ([]GetScheduleRecipeRow, error) {
	rows, err := q.db.QueryContext(ctx, getScheduleRecipe, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScheduleRecipeRow
	for rows.Next() {
		var i GetScheduleRecipeRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.RecipeID,
			&i.Name,
			&i.Portion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroceries = `-- name: ListGroceries :many
SELECT i.id, i.name
FROM schedules_recipes AS sr
INNER JOIN recipes_ingredients AS ri
ON sr.recipe_id = ri.recipe_id
INNER JOIN ingredients AS i
ON ri.ingredient_id = i.id
WHERE sr.schedule_id = $1
GROUP BY i.id
ORDER BY i.name
`

type ListGroceriesRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListGroceries(ctx context.Context, scheduleID int64) ([]ListGroceriesRow, error) {
	rows, err := q.db.QueryContext(ctx, listGroceries, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGroceriesRow
	for rows.Next() {
		var i ListGroceriesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchedules = `-- name: ListSchedules :many
SELECT id, author, created_at from schedules
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListSchedulesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSchedules(ctx context.Context, arg ListSchedulesParams) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, listSchedules, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(&i.ID, &i.Author, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
