// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    password,
    role
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, email, password, created_at, role, verified_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
		&i.VerifiedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getLogin = `-- name: GetLogin :one
SELECT id, username, email, password, created_at, role, verified_at from users
WHERE username = $1 LIMIT 1
FOR SHARE
`

func (q *Queries) GetLogin(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getLogin, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
		&i.VerifiedAt,
	)
	return i, err
}

const getPermission = `-- name: GetPermission :one
SELECT role, verified_at from users
WHERE id = $1 LIMIT 1
FOR SHARE
`

type GetPermissionRow struct {
	Role       string       `json:"role"`
	VerifiedAt sql.NullTime `json:"verifiedAt"`
}

func (q *Queries) GetPermission(ctx context.Context, id uuid.UUID) (GetPermissionRow, error) {
	row := q.db.QueryRowContext(ctx, getPermission, id)
	var i GetPermissionRow
	err := row.Scan(&i.Role, &i.VerifiedAt)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, created_at, role, verified_at from users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
		&i.VerifiedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, created_at, role, verified_at from users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.Role,
			&i.VerifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
  set password = $2
WHERE email = $1
RETURNING email, password
`

type UpdatePasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdatePasswordRow struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (UpdatePasswordRow, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.Email, arg.Password)
	var i UpdatePasswordRow
	err := row.Scan(&i.Email, &i.Password)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set username = $2,
  email = $3
WHERE id = $1
RETURNING id, username, email, password, created_at, role, verified_at
`

type UpdateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
		&i.VerifiedAt,
	)
	return i, err
}

const updateVerified = `-- name: UpdateVerified :one
UPDATE users
  set verified_at = $2
WHERE id = $1
RETURNING id, username, email, password, created_at, role, verified_at
`

type UpdateVerifiedParams struct {
	ID         uuid.UUID    `json:"id"`
	VerifiedAt sql.NullTime `json:"verifiedAt"`
}

func (q *Queries) UpdateVerified(ctx context.Context, arg UpdateVerifiedParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateVerified, arg.ID, arg.VerifiedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.Role,
		&i.VerifiedAt,
	)
	return i, err
}
