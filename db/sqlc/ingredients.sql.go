// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: ingredients.sql

package db

import (
	"context"
	"database/sql"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (
    name, default_unit
) VALUES (
    $1, $2
) RETURNING id, name, created_at, default_unit
`

type CreateIngredientParams struct {
	Name        string        `json:"name"`
	DefaultUnit sql.NullInt32 `json:"defaultUnit"`
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.Name, arg.DefaultUnit)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.DefaultUnit,
	)
	return i, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE id = $1
`

func (q *Queries) DeleteIngredient(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, id)
	return err
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, name, created_at, default_unit from ingredients
WHERE id = $1
`

func (q *Queries) GetIngredient(ctx context.Context, id int32) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.DefaultUnit,
	)
	return i, err
}

const listGrocery = `-- name: ListGrocery :many
SELECT DISTINCT ingredients.id, ingredients.name
FROM ingredients
INNER JOIN recipes_ingredients
ON ingredients.id = recipes_ingedients.ingredient_id
INNER JOIN schedules_recipes
ON recipes_ingredients.recipe_id = schedules_recipes.recipe_id
WHERE schedules_recipes.schedule_id = $1
ORDER BY ingredients.name
`

type ListGroceryRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListGrocery(ctx context.Context, scheduleID int64) ([]ListGroceryRow, error) {
	rows, err := q.db.QueryContext(ctx, listGrocery, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGroceryRow
	for rows.Next() {
		var i ListGroceryRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIngredient = `-- name: ListIngredient :many
SELECT id, name, created_at, default_unit from ingredients
ORDER BY name
`

func (q *Queries) ListIngredient(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, listIngredient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.DefaultUnit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchIngredient = `-- name: SearchIngredient :many
SELECT id, name, default_unit from ingredients
WHERE name LIKE $1
`

type SearchIngredientRow struct {
	ID          int32         `json:"id"`
	Name        string        `json:"name"`
	DefaultUnit sql.NullInt32 `json:"defaultUnit"`
}

func (q *Queries) SearchIngredient(ctx context.Context, name string) ([]SearchIngredientRow, error) {
	rows, err := q.db.QueryContext(ctx, searchIngredient, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchIngredientRow
	for rows.Next() {
		var i SearchIngredientRow
		if err := rows.Scan(&i.ID, &i.Name, &i.DefaultUnit); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients
    set name = $2,
    default_unit = $3
WHERE id = $1
RETURNING id, name, created_at, default_unit
`

type UpdateIngredientParams struct {
	ID          int32         `json:"id"`
	Name        string        `json:"name"`
	DefaultUnit sql.NullInt32 `json:"defaultUnit"`
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, updateIngredient, arg.ID, arg.Name, arg.DefaultUnit)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.DefaultUnit,
	)
	return i, err
}
